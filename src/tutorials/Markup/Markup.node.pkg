<?xml version="1.0" ?>
<refentry id="{@id Markup.node}">
    <refnamediv>
        <refname>Node (各種パーツ)</refname>
    </refnamediv>
    <refsynopsisdiv>
        Author : <author>trashtoy</author>
    </refsynopsisdiv>
    {@toc}
    <refsect1 id="{@id summary}">
        <title>概要</title>
        <para>
            {@link Peach_Markup_Node Node} インタフェースはマークアップ言語を構成するパーツをあらわします.
            具体的には要素・テキスト・コメントなどに相当します.
        </para>
        <para>
            API は {@link http://www.w3.org/DOM/ DOM} に似ている部分もありますが, それは表面的な相似に過ぎません.
            このモジュールの目的はマークアップ言語のモデル化ではなく出力であるため,
            DOM で定義されている一部のノードは意図的にサポートされていません.
            逆に, DOM には無くこのモジュールのみに存在するノードもあります.
        </para>
    </refsect1>
    <refsect1 id="{@id element}">
        <title>Element</title>
        <para>
            {@link Peach_Markup_Element Element}
            はマークアップ言語における「要素」を表現するクラスです.
            Element には {@link Peach_Markup_ContainerElement ContainerElement}
            と {@link Peach_Markup_EmptyElement EmptyElement} の 2 種類があります.
        </para>
        <refsect2 id="{@id container_element}">
            <title>ContainerElement</title>
            <para>
                {@link Peach_Markup_ContainerElement ContainerElement}
                は開始タグと終了タグから成る要素を表します.
                {@link Peach_Markup_ContainerElement::append() append()}
                メソッドを使ってテキストや任意のノードを子ノードとして追加することが出来ます.
            </para>
            <para>以下に ContainerElement を使ったサンプルコードを掲載します.</para>
            <programlisting role="php">
                <![CDATA[
$p = new Peach_Markup_ContainerElement("p");
$p->setAttribute("class", "test");
$p->append("The Quick Brown Fox Jumps Over The Lazy Dogs.");

$builder = new Peach_Markup_DefaultBuilder();
echo $builder->build($p);
                ]]>
            </programlisting>
            <para>このコードは以下の結果を出力します.</para>
            <programlisting role="php">
                <![CDATA[
<p class="test">The Quick Brown Fox Jumps Over The Lazy Dogs.</p>
                ]]>
            </programlisting>
        </refsect2>
        <refsect2 id="{@id empty_element}">
            <title>EmptyElement</title>
            <para>
                {@link Peach_Markup_EmptyElement EmptyElement}
                は空要素 (終了タグを伴わないタグ) を表すクラスです.
                HTML では img, input, br, hr などの要素が該当します.
            </para>
            <para>
                このノードは {@link Peach_Markup_DefaultBuilder::setRenderer()}
                で {@link Peach_Markup_Renderer Renderer} の種類を切り替えることで,
                タグの書式を制御することが出来ます.
                以下にサンプルコードを掲載します.
                タグの末尾が ">" から "/>" に変化していることに注目してください.
            </para>
            <programlisting role="php">
                <![CDATA[
$input = new Peach_Markup_EmptyElement("input");
$input->setAttributes(array("type" => "text", "name" => "subject", "value" => ""));

$builder = new Peach_Markup_DefaultBuilder();
$builder->setRenderer("HTML");
echo $builder->build($input); // Output: <input type="text" name="subject" value="">

$builder->setRenderer("XHTML");
echo $builder->build($input); // Output: <input type="text" name="subject" value="" />
                ]]>
            </programlisting>
        </refsect2>
        <refsect2 id="{@id attributes}">
            <title>属性の設定方法</title>
            <para>
                要素に属性をセットするためのメソッドとして
                {@link Peach_Markup_Element::setAttribute() setAttribute()} と
                {@link Peach_Markup_Element::setAttributes() setAttributes()}
                の 2 種類があります.
                属性を 1 つだけセットする場合は setAttribute(),
                複数の属性を一度にセットしたい場合は setAttributes()
                といった具合に使い分けると良いでしょう.
            </para>
            <para>以下にサンプルコードを掲載します.</para>
            <programlisting role="php">
                <![CDATA[
// setAttribute() で属性をセットします
$script = new Peach_Markup_ContainerElement("script");
$script->setAttribute("type", "text/javascript");
$script->setAttribute("src", "sample.js");

// 以下のように setAttributes() で複数の属性を一度にセットすることも出来ます
$script = new Peach_Markup_ContainerElement("script");
$script->setAttributes(array("type" => "text/javascript", "src" => "sample.js"));
                ]]>
            </programlisting>
        </refsect2>
        <refsect2 id="{@id boolean_attributes}">
            <title>Boolean 属性の設定方法</title>
            <para>
                例えば HTML における input 要素の readonly 属性のような,
                値を持たない属性のことを Boolean 属性と呼びます.
                要素に Boolean 属性をセットするには以下の方法があります.
            </para>
            <itemizedlist>
                <listitem>setAttribute() の第 2 引数に null を指定する (または第 2 引数を省略する)</listitem>
                <listitem>setAttributes() の引数の配列で, キーに属性名, 値に null を設定する</listitem>
                <listitem>setAttributes() の引数の配列で, キーを省略し, 値に属性名を設定する</listitem>
            </itemizedlist>
            <para>
                input 要素に readonly 属性を付加するサンプルコードを掲載します.
                以下に挙げるコードはすべて同じ意味になります.
            </para>
            <programlisting role="php">
                <![CDATA[
// setAttribute() の第 2 引数を省略する場合
$input = new Peach_Markup_EmptyElement("input");
$input->setAttributes(array("type" => "text", "name" => "subject", "value" => "Sample"));
$input->setAttribute("readonly");

// キーに属性名, 値に null を指定する場合
$input = new Peach_Markup_EmptyElement("input");
$input->setAttributes(array("type" => "text", "name" => "subject", "value" => "Sample", "readonly" => null));

// キーを省略する場合
$input = new Peach_Markup_EmptyElement("input");
$input->setAttributes(array("type" => "text", "name" => "subject", "value" => "Sample", "readonly"));
                ]]>
            </programlisting>
        </refsect2>
    </refsect1>
    <refsect1 id="{@id text}">
        <title>Text</title>
        <para>
            {@link Peach_Markup_Text Text} は要素内のテキストを表します.
            このノードは出力される際に自動的に {@link htmlspecialchars() htmlspecialchars()}
            で特殊文字を変換します.
        </para>
        <para>
            {@link Peach_Markup_ContainerElement::append() append()}
            メソッドの引数に文字列を指定した場合, 内部ではその文字列の内容をあらわす
            Text ノードが生成され, そのノードが追加されるという仕組みになっています.
        </para>
        <para>以下にサンプルコードを掲載します.</para>
        <programlisting role="php">
            <![CDATA[
$text = new Paach_Markup_Text("<Hello> & <World!>");
$p1   = new Peach_Markup_ContainerElement("p");
$p1->append($text);

// 通常は, 以下のように文字列を直接 append してください (上の書き方と同じ処理です)
$p2   = new Peach_Markup_ContainerElement("p");
$p2->append("<Hello> & <World!>");

$builder = new Peach_Markup_DefaultBuilder();
echo $builder->build($p1); // Output: <p>&lt;Hello&gt; &amp; &lt;World!&gt;</p>
            ]]>
        </programlisting>
    </refsect1>
    <refsect1 id="{@id code}">
        <title>Code</title>
        <para>
            {@link Peach_Markup_Code Code} は整形済のテキストを表すクラスです.
            Text ノードと違い, 出力の際に特殊文字の変換 (エスケープ)
            は一切せず, 与えられた文字列をそのまま出力します.
            XML 宣言, DOCTYPE 宣言, CDATA セクション, PI (処理命令) など,
            このモジュールでサポートされていない構文をノードの一部として扱いたい場合に使用してください.
        </para>
        <para>
            以下は HTML の style 要素を出力するサンプルコードです.
        </para>
        <programlisting role="php">
            <![CDATA[
$str = <<<EOS
body {
    color: #000;
    background-color: #fff;
    width: 100%;
}
@media(min-width: 901px) {
    body {
        width: 900px;
    }
}
EOS;

$style = new Peach_Markup_ContainerElement("style");
$style->setAttribute("type", "text/css");
$style->append(new Peach_Markup_Code($str));

$builder = new Peach_Markup_DefaultBuilder();
echo $builder->build($style);
            ]]>
        </programlisting>
        <para>このコードは以下の文字列を出力します.</para>
        <programlisting role="php">
            <![CDATA[
<style type="text/css">
    body {
        color: #000;
        background-color: #fff;
        width: 100%;
    }
    @media(min-width: 901px) {
        body {
            width: 900px;
        }
    }
</style>
            ]]>
        </programlisting>
    </refsect1>
    <refsect1 id="{@id comment}">
        <title>Comment</title>
        <para>
            {@link Peach_Markup_Comment Comment} は &lt;!-- と --&gt;
            で囲まれたコメント部分を表現するクラスです.
            以下にサンプルコードを掲載します.
        </para>
        <programlisting role="php">
            <![CDATA[
$comment = new Peach_Markup_Comment();
$comment->append("Sample comment");
$builder = new Peach_Markup_DefaultBuilder();
echo $builder->build($comment); // Output: <!--Sample comment-->
            ]]>
        </programlisting>
        <refsect2 id="{@id commentout}">
            <title>コメントアウト</title>
            <para>
                単純にテキストをコメントにするだけではなく,
                任意のノードのコメントアウトも表現出来ます.
                以下に例を挙げます.
            </para>
            <programlisting role="php">
                <![CDATA[
$h1 = new Peach_Markup_ContainerElement("h1");
$h1->append("Sample");

$p = new Peach_Markup_ContainerElement("p");
$p->append("This paragraph is disabled.");

$comment = new Peach_Markup_Comment();
$comment->append($h1);
$comment->append($p);

$builder = new Peach_Markup_DefaultBuilder();
echo $builder->build($comment);
                ]]>
            </programlisting>
            <para>このコードは以下の文字列を出力します.</para>
            <programlisting role="php">
                <![CDATA[
<!--
<h1>Sample</h1>
<p>This paragraph is disabled.</p>
-->
                ]]>
            </programlisting>
        </refsect2>
        <refsect2 id="{@id comment_prefix_suffix}">
            <title>メタコメント</title>
            <para>
                以下のように, コメントの先頭と末尾に任意の文字列を付与することが出来ます.
            </para>
            <programlisting role="php">
                <![CDATA[
$h1 = new Peach_Markup_ContainerElement("h1");
$h1->append("Sample");

$p = new Peach_Markup_ContainerElement("p");
$p->append("This paragraph is disabled.");

$comment = new Peach_Markup_Comment("START", "END");
$comment->append($h1);
$comment->append($p);

$builder = new Peach_Markup_DefaultBuilder();
echo $builder->build($comment);
                ]]>
            </programlisting>
            <para>
                このコードは以下の文字列を出力します.
                先ほどの例と似ていますが, コメントの先頭と末尾に "START", "END"
                という文字列が付与されていることに注目してください.
            </para>
            <programlisting role="php">
                <![CDATA[
<!--START
<h1>Sample</h1>
<p>This paragraph is disabled.</p>
END-->
                ]]>
            </programlisting>
            <para>
                この機能を使って一部のブラウザに実装されている条件付きコメント
                ("&lt;!--[if lt IE 7]&gt; ... &lt;![endif]--&gt;" など)
                を表現することも出来ますが, 条件付きコメント専用の API として
                {@link Peach_Markup_Html::conditionalComment()}
                が既に用意されているので, 通常はそちらを使用することを推奨します.
            </para>
        </refsect2>
    </refsect1>
</refentry>
